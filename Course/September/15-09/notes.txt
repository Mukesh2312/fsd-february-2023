1Event Propagation
//Proble statement:
  //Whenever you have multiple events attached to both child and parent 
  //once you trigger child events parent events is get trigger this concept is called event bubbling
//Solution:  
   //To avoid event bubbling we need to use event.Propagation()
  //event.Propagation() it will stop further events.
Example:
   <div onclick=functionOne()>
      <div onclick=functionTwo(event)></div>
   </div>
   function functionTwo(event){
     event.stopPropagation();
   }
2addEventListener
//Instead of adding events directly to html tags we can add dynamically from javascript as well.
//onclick will change to click similar for all other events we need to remove on keyword 
//Event addEventListener will consists of callback function.
//This function can be written separately or we can attached directly also.
Example:
<div id="demo"></div>
Appoach 1:
document.getElementById("demo").addEventListener(click,funtionOne);
function functionOne(){

}
Approach:2
document.getElementById("demo").addEventListener(click,function(){

});
3preventDefault
//This will deactivate the functionality of href and form submit
//Mainly it is used in form submission. 
<a href="" id="demo"></a>
document.getElementById("demo").addEventListener(click,function(event){
  event.preventDefault();
});
======================================================
String method:
//String store the data continuously inside the memory similar to array 
Example:
var fullName = "welcome";
fullName[0];
//Converting String to Array 
"newton".split("");
//To find the length of string 
"newton".length;
========================================
let and const:
//This is new syntax came on es6
//It is used to declare variables in javascript
//It is alternative to var keyword 
//Please start avoid using var keyword 
Reason:
//var with same name we can able to declare multiple times 
//Inside the for loop var keyword is leaked outside the loop as well 
//var keyword is function scope 
//let keyword is block scope 
//const keyword we cannot reinitialize the value.
//const kewword is block scope
======================================================



